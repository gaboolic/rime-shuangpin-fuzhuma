# Rime schema
# encoding: utf-8
# https://github.com/gaboolic/rime-shuangpin-fuzhuma
#Lua 配置: 超级注释模块
pro_comment_format:                   # 超级注释，子项配置 true 开启，false 关闭
  fuzhu_code: true                    # 启用辅助码提醒，用于辅助输入练习辅助码，成熟后可关闭
  candidate_length: 1                 # 候选词辅助码提醒的生效长度，0为关闭  但同时清空其它，应当使用上面开关来处理    
  fuzhu_type: moqi                     # 用于匹配对应的辅助码注释显示，可选显示类型有：moqi, flypy, zrm, jdh, cj, tiger, wubi,选择一个填入，应与上面辅助码类型一致

  corrector: true                     # 启用错音错词提醒，例如输入 geiyu 给予 获得 jiyu 提示
  corrector_type: "{comment}"         # 新增一个显示类型，比如"【{comment}】" 

schema:
  schema_id: moqi_wan_quanpin_moqi
  name: 墨奇万象+全拼·墨奇
  version: "2024-05-11"
  author:
    - gaboolic
  description: |
    墨奇辅助码 自然码双拼版 大词库版本 非自动上屏，支持4万字 https://github.com/gaboolic/rime-shuangpin-fuzhuma/wiki/%E5%A2%A8%E5%A5%87%E7%A0%81%E6%8B%86%E5%88%86%E8%A7%84%E5%88%99
  dependencies:
    - reverse_moqima
    - radical_flypy
    - stroke
    - zrlf
    - emoji
    - easy_en
    - jp_sela
    - moqi_big

__include: moqi.yaml:/switches_engine
__include: moqi.yaml:/phrase # 置顶
__include: moqi.yaml:/reverse #反查配置
__include: moqi.yaml:/opencc_config # 拆分 英汉互译 火星文
__include: moqi.yaml:/punctuator # 标点
__include: moqi.yaml:/guide # 引导前缀配置

speller:
  max_code_length: 5
  # table_translator翻译器，支持自动上屏。例如 “zmhu”可以自动上屏“怎么回事”
  auto_select: true
  auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}|;[a-z]
  # 如果不想让什么标点直接上屏，可以加在 alphabet，或者编辑标点符号为两个及以上的映射
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA[/|
  # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
  initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA
  # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
  delimiter: " '"
  ## speller 未允许 aj 表示 an
  algebra:
    # ^(.+?);.*$
    __include: moqi_speller.yaml:/quanpin_speller # 全拼


__include: moqi.yaml:/big_char_and_user_dict # 大字集、自造词

translator:
  dictionary: moqi_wan.extended
  initial_quality: 10000
  enable_completion: false
  ##  默认为不超过 2 个字的候选项显示输入码；将 2 改为 0 可关闭编码提示，
  ##  改为 1 则是只显示单字的输入码，依此类推。
  spelling_hints: 10      #将注释以词典字符串形式完全暴露，通过pro_comment_format.lua完全接管，灵活配置。
  comment_format: {comment}  #将注释以词典字符串形式完全暴露，通过pro_comment_format.lua完全接管，灵活配置。

  enable_user_dict: false # 是否开启自动调频
  preedit_format:

aux_patch:
  __include: moqi_speller.yaml:/moqi_aux
  __append:
    __include: moqi_speller.yaml:/common_aux

__patch:
  add_user_dict/dictionary: moqi_wan.extended
  user_dict_set/dictionary: moqi_wan.extended
  translator/prism: moqi_wan_quanpin_moqi
  user_dict_set/prism: moqi_wan_quanpin_moqi
  add_user_dict/prism: moqi_wan_quanpin_moqi
  big_char_set/prism: moqi_wan_big_quanpin_moqi
  speller/algebra/+:
    __include: aux_patch


# 快捷键
key_binder:
  import_preset: default
  bindings:
    #- { when: composing, accept: Tab, send: '[' } ## 取消注释后：tab引导辅助码
    - { when: composing, accept: Control+m, send: Return }
    - { when: composing, accept: Control+w, send: Control+BackSpace }
    - { when: has_menu, accept: semicolon, send: 2 }
    # - { when: has_menu, accept: slash, send: 3 } # 用/进行选3
    - { when: composing, accept: Control+i, send: Shift+Right }
    - { when: composing, accept: Control+o, send: Shift+Left }
    # 显示墨奇码拆分的快速开关
    - { when: has_menu, accept: "Control+p", toggle: chaifen }
    - { when: has_menu, accept: "Control+l", toggle: chaifen_all }
    - { when: has_menu, accept: "Control+e", toggle: chinese_english }


    - { match: "[a-z]{1,3}", accept: Tab,  send_sequence: "/1" }
    - { match: "[a-z]{1,3}", accept: "/",  send_sequence: "/1" }
    - { match: "[a-z]{1,3}", accept: ".",  send_sequence: "/1" }
    # - { when: composing, match: "[a-z]{2}", accept: Tab, send: '|' }

    ## 启用光标回退至特定音节后、补充辅助码的功能。补充完辅助码后，可以再按一次tab回到整句检查
    - { when: composing, accept: Control+1, send_sequence: '{Home}{Shift+Right}[' }
    - { when: composing, accept: Control+2, send_sequence: '{Home}{Shift+Right}{Shift+Right}[' }
    - { when: composing, accept: Control+3, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}[' }
    - { when: composing, accept: Control+4, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}[' }
    - { when: composing, accept: Control+5, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}[' }
    - { when: composing, accept: Control+6, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}[' }
    - { when: composing, accept: Control+7, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}[' }

    # 大写辅助码加到整句第一个音节，例如iuyyfw默认是楚云飞，按下shift+u (iuu yy fw)变成出运费
    - { when: has_menu, accept: Shift+A, send_sequence: "{Shift+Right}a{Shift+Right}" }
    - { when: has_menu, accept: Shift+B, send_sequence: "{Shift+Right}b{Shift+Right}" }
    - { when: has_menu, accept: Shift+C, send_sequence: "{Shift+Right}c{Shift+Right}" }
    - { when: has_menu, accept: Shift+D, send_sequence: "{Shift+Right}d{Shift+Right}" }
    - { when: has_menu, accept: Shift+E, send_sequence: "{Shift+Right}e{Shift+Right}" }
    - { when: has_menu, accept: Shift+F, send_sequence: "{Shift+Right}f{Shift+Right}" }
    - { when: has_menu, accept: Shift+G, send_sequence: "{Shift+Right}g{Shift+Right}" }
    - { when: has_menu, accept: Shift+H, send_sequence: "{Shift+Right}h{Shift+Right}" }
    - { when: has_menu, accept: Shift+I, send_sequence: "{Shift+Right}i{Shift+Right}" }
    - { when: has_menu, accept: Shift+J, send_sequence: "{Shift+Right}j{Shift+Right}" }
    - { when: has_menu, accept: Shift+K, send_sequence: "{Shift+Right}k{Shift+Right}" }
    - { when: has_menu, accept: Shift+L, send_sequence: "{Shift+Right}l{Shift+Right}" }
    - { when: has_menu, accept: Shift+M, send_sequence: "{Shift+Right}m{Shift+Right}" }
    - { when: has_menu, accept: Shift+N, send_sequence: "{Shift+Right}n{Shift+Right}" }
    - { when: has_menu, accept: Shift+O, send_sequence: "{Shift+Right}o{Shift+Right}" }
    - { when: has_menu, accept: Shift+P, send_sequence: "{Shift+Right}p{Shift+Right}" }
    - { when: has_menu, accept: Shift+Q, send_sequence: "{Shift+Right}q{Shift+Right}" }
    - { when: has_menu, accept: Shift+R, send_sequence: "{Shift+Right}r{Shift+Right}" }
    - { when: has_menu, accept: Shift+S, send_sequence: "{Shift+Right}s{Shift+Right}" }
    - { when: has_menu, accept: Shift+T, send_sequence: "{Shift+Right}t{Shift+Right}" }
    - { when: has_menu, accept: Shift+U, send_sequence: "{Shift+Right}u{Shift+Right}" }
    - { when: has_menu, accept: Shift+V, send_sequence: "{Shift+Right}v{Shift+Right}" }
    - { when: has_menu, accept: Shift+W, send_sequence: "{Shift+Right}w{Shift+Right}" }
    - { when: has_menu, accept: Shift+X, send_sequence: "{Shift+Right}x{Shift+Right}" }
    - { when: has_menu, accept: Shift+Y, send_sequence: "{Shift+Right}y{Shift+Right}" }
    - { when: has_menu, accept: Shift+Z, send_sequence: "{Shift+Right}z{Shift+Right}" }
# 启用語言模型
#__include: moqi:/octagram/enable_for_sentence

custom_phrase:
  dictionary: ""
  user_dict: custom_phrase/custom_phrase
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 100000
